#!/usr/bin/python
#
#    Paroli
#
#    copyright 2008  Openmoko
#
#    This file is part of Paroli.
#
#    Paroli is free software: you can redistribute it and/or modify it
#    under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Paroli is distributed in the hope that it will be useful, but
#    WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Paroli.  If not, see <http://www.gnu.org/licenses/>.

"""Paroli main script

This script will load all the paroli plugins, then init the services,
and finally run the application 'Paroli-Launcher'
"""

# All the needed system modules
import sys
import os
from optparse import OptionParser
import ConfigParser
import logging

# This is to make sure that we use the local tichy lib if run from the
# test directory
sys.path.insert(0, '../paroli-core/')
sys.path.insert(0, '../paroli-graphics-backend/')

import tichy

logger = logging.getLogger('')


def parse_options():
    """Parse the command line options

    :Returns: the OptionParser result object
    """
    parser = OptionParser()
    parser.add_option("", "--cfgfile", dest="cfg_file",
                      help="specigy the configuration file to use",
                      metavar="FILE", default=None)
    parser.add_option("", "--show-services", dest='show_services',
                      action='store_true', default=False,
                      help="print some info about the services and exit")

    (options, args) = parser.parse_args()
    return options


def setup_logging():
    """Set up two logging handlers, one in the log file, one in the
    stdoutput"""
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)s %(name)-8s %(levelname)-8s %(message)s',
        filename='/tmp/paroli.log', filemode='w')

    formatter = logging.Formatter(
        '%(name)-8s %(levelname)-8s %(message)s')
    stream_log = logging.StreamHandler()
    stream_log.setFormatter(formatter)
    stream_log.setLevel(logging.INFO)
    logger.addHandler(stream_log)


def parse_config(cfg_file=None):
    """parse the config files

    We look into 3 locations : first the local dir, then /etc/paroli/,
    then the home directory

    :Parameters:

        cfg_file : str | None
            the configuartion file to use, or None for default config
            files

    :Returns: the ConfigParser object
    """
    config = ConfigParser.SafeConfigParser()
    if not cfg_file:
        local_path = "./paroli.cfg"
        system_path = "/etc/paroli/paroli.cfg"
        home_path = os.path.expanduser("~/.paroli/paroli.cfg")
        files = [local_path, system_path, home_path]
    else:
        files = cfg_file.split(':')
    for path in files:
        logger.info("read config file %s", path)
        config.read(path)
    return config


class InitAll(tichy.Tasklet):
    """Perform all basic initialization of services"""

    def run(self):
        # Register on the GSM Network
        gsm_service = tichy.Service('GSM')
        yield gsm_service.init()
        # Set SIM info
        gsm_sim = tichy.Service('SIM')
        yield gsm_sim.set_info()
        # Get all the contacts
        contacts = tichy.Service('Contacts')
        yield contacts.init()
        messages_service = tichy.Service('Messages')
        yield messages_service.init()

        # Finally we can start to listen for incoming calls
        logger.info("start AutoAnswerCall")
        yield AutoAnswerCall()

class AutoAnswerCall(tichy.Tasklet):

    def run(self):
        # We don't create any window, just run in the background...
        # warning; that would only work with gtk or etk backend...
        gsm_service = tichy.Service('GSM')
        while True:
            call = yield tichy.Wait(gsm_service, 'incoming-call')
            logger.info("got incoming call")
            caller_service = tichy.Service('Caller')
            yield caller_service.call(None, call)


if __name__ == '__main__':
    options = parse_options()

    setup_logging()
    config = parse_config(cfg_file=options.cfg_file)

    logger.info("init gui")
    tichy.init_gui(None)

    # We import all the modules into the plugin directory
    default_plugins_path = '/usr/share/tichy/plugins'
    plugins_dir = config.get('plugins', 'path', default_plugins_path)
    plugins_dirs = plugins_dir.split(':')
    for plugins_dir in plugins_dirs:
        try:
            logger.info("try to load plugins in %s", plugins_dir)
            tichy.plugins.import_all(plugins_dir)
        except IOError:
            logger.info("failed to load plugins in %s", plugins_dir)

    # Set all the default services
    if config.has_option('services', 'defaults'):
        defaults = config.get('services', 'defaults').split(',')
        for default in defaults:
            if not default:
                continue
            service, name = default.strip().split(':')
            logger.info("set service %s to %s", service, name)
            tichy.Service.set_default(service, name)

    if options.show_services:
        from tichy.service import print_infos
        print_infos()
        sys.exit(0)

    def on_done():
        """called when the main application quit"""
        tichy.mainloop.quit()

    logger.info("start InitAll")
    InitAll().start()

    logger.info("start launcher application")
    launcher = tichy.Application.find_by_name('Paroli-Launcher')
    # '01' for standalone and advanced-mode
    launcher(None, '01').start(callback=on_done)

    logger.info("starting mainloop")
    tichy.mainloop.run()
    logger.info("quit")
